[["index.html", "Economic Data Visualization 第 1 章 Prerequisites 1.1 Start a project 1.2 中文 1.3 econDV2 1.4 .Rprofile 1.5 其他", " Economic Data Visualization Dr. Lin, Mau-Ting 2021 第 1 章 Prerequisites 1.1 Start a project Start a new project for your ggplot environment: Project &gt; New Project… &gt; New Directory &gt; New Project 1.2 中文 install.packages( c(&quot;showtext&quot;,&quot;extrafont&quot;) ) sysfonts::font_families() sysfonts::font_add_google(&#39;Noto Sans TC&#39;) sysfonts::font_families() library(ggplot2) library(showtext) showtext_auto() theme_set( theme( text=element_text(family = &quot;Noto Sans TC&quot;) ) ) 你也可以在你的.Rprofile裡加上: library(ggplot2) library(showtext) sysfonts::font_add_google(&#39;Noto Sans TC&#39;) showtext_auto() theme_set( theme( text=element_text(family = &quot;Noto Sans TC&quot;) ) ) 1.3 econDV2 devtools::install_github(&quot;tpemartin/econDV2&quot;) 1.4 .Rprofile library(ggplot2) library(showtext) sysfonts::font_add_google(&#39;Noto Sans TC&#39;) showtext_auto() theme_set( theme( text=element_text(family = &quot;Noto Sans TC&quot;) )+ theme_classic() ) library(econDV2) gg &lt;- list( dash = econDV2::ggdash, geom = econDV2::ggbrowse, aes = econDV2::ggaes ) 1.5 其他 後製軟體： Choose your own image editor, but make sure it support SVG editing. Here I use Boxy SVG. 程式排版： install.packages(&quot;styler&quot;) "],["geometries-and-aesthetics.html", "第 2 章 Geometries and Aesthetics 2.1 An Example 2.2 Inheritance", " 第 2 章 Geometries and Aesthetics Available geometries Two steps: Step 1: What geometries do you see? Step 2: With a given geometry, what aesthetics do you observe? Geometries? Aesthetics? 2.1 An Example Geom: geom_point: x, y：varies with observations color (線框顏色): constant stroke (線框粗細): constant fill (內部塗色): constant size (點的大小): constant geom_text: x, y: varies with observations label: varies with observations hjust (文字水平錨點）：between 0 and 1 vjust (文字垂直錨點）: between 0 and 1 # take Colombia, Normway, and Gemany as an example data4plot &lt;- list() data4plot$point$data &lt;- { data.frame( x=c(52.5, 56, 58.5), y=c(48.6, 54.9, 58) ) } data4plot$text$data &lt;- { data.frame( x=c(52.5, 56, 58.5), y=c(48.6, 54.9, 58), label=c(&quot;Colombia&quot;, &quot;Norway&quot;, &quot;Germany&quot;) ) } myplot &lt;- { ggplot()+ geom_point( data=data4plot$point$data, mapping=aes( x=x, y=y ), fill=&quot;blue&quot;, shape=21, color=&quot;black&quot;, stroke=1, size=1 )+ geom_text( data=data4plot$text$data, mapping=aes( x=x, y=y, label=label ), hjust = 1, size = 1 ) } myplot use econDV2::ggdash() to quickly create a shiny app of your ggplot to fine tune your graph. 2.1.1 econDV2::ggdash myplot &lt;- { ggplot()+ geom_point( data=data4plot$point$data, mapping=aes( x=x, y=y ), fill=&quot;blue&quot;, #input$fill_point shape=21, # default point is a circle without border, you need another type of point color=&quot;black&quot;, #input$color_point stroke=1, #input$stroke_point size=1 #input$size_point )+ geom_text( data=data4plot$text$data, mapping=aes( x=x, y=y, label=label ), hjust = 1, #input$hjust_text size = 1 #input$size_text ) } myplot myplot &lt;- { ggplot() + geom_point( data = data4plot$point$data, mapping = aes( x = x, y = y ), fill = &quot;#2fc1d3&quot;, shape = 21, color = &quot;black&quot;, stroke = 1, size = 12 ) + geom_text( data = data4plot$text$data, mapping = aes( x = x, y = y, label = label ), hjust = 0, size = 12 ) } myplot 2.1.2 Script saving If you are happy with your graph, you may want to make it reproducible and easy to use. Think of how you want to use it next time. Turn your script into a function, and save in a R script. Select the code lines that you want to turn into a function Code &gt; Extract Function The result after proper revision: myGoodPlot &lt;- function(data4plot) { myplot &lt;- { ggplot() + geom_point( data = data4plot$point$data, mapping = aes( x = x, y = y ), fill = &quot;#2fc1d3&quot;, shape = 21, color = &quot;black&quot;, stroke = 1, size = 12 ) + geom_text( data = data4plot$text$data, mapping = aes( x = x, y = y, label = label ), hjust = 0, size = 12 ) } myplot } To reuse: source(&quot;support/ggplots.R&quot;) # suppose this is where your script file is data4plot &lt;- list() data4plot$point$data &lt;- { data.frame( x=c(52.5, 56, 58.5), y=c(48.6, 54.9, 58) ) } data4plot$text$data &lt;- { data.frame( x=c(52.5, 56, 58.5), y=c(48.6, 54.9, 58), label=c(&quot;Colombia&quot;, &quot;Norway&quot;, &quot;Germany&quot;) ) } myGoodPlot(data4plot) If you replace data4plot with the real data, you get the accurate graph that you want. 2.1.3 Graph output Saving is tricky. You need to find the viewport ratio. (Different computers are different) Given your graph width and height, you can save your output as: dir.create(&quot;works&quot;) ggsave( filename = &quot;works/week1.png&quot;, plot=myGoodPlot(data4plot), width=930, height=400, units=&quot;mm&quot; # text size is default in mm unit ) 2.1.4 ggdash more ggdash can control any input within a programming block myplot2 &lt;- { myshape = 21 #input$shape_point ggplot() + geom_point( data = data4plot$point$data, mapping = aes( x = x, y = y ), fill = &quot;#2fc1d3&quot;, shape = myshape, color = &quot;black&quot;, stroke = 1, size = 12 ) + geom_text( data = data4plot$text$data, mapping = aes( x = x + 0, #input$x_text y = y, label = label ), hjust = 0, size = 12 ) } myplot2 2.2 Inheritance 2.2.1 Data Common data source can be put in ggplot(): ALL geoms will use the same data to find aes() mapping, UNLESS the geom has its own data supplied. data = data4plot$text$data myplot &lt;- { ggplot(data = data, ) + geom_point( mapping = aes( x = x, y = y ), fill = &quot;#2fc1d3&quot;, shape = 21, color = &quot;black&quot;, stroke = 1, size = 12 ) + geom_text( # data = data4plot$text$data, mapping = aes( x = x, y = y, label = label ), hjust = 0, size = 12 ) } 2.2.2 Aesthetics myplot &lt;- { ggplot( data = data, mapping = aes(x=x, y=y) ) + geom_point( fill = &quot;#2fc1d3&quot;, shape = 21, color = &quot;black&quot;, stroke = 1, size = 12 ) + geom_text( mapping = aes( label = label ), hjust = 0, size = 12 ) } myplot plot_hightlightCountries &lt;- function(data) { myplot &lt;- { ggplot(data = data, ) + geom_point( mapping = aes( x = x, y = y ), fill = &quot;#2fc1d3&quot;, shape = 21, color = &quot;black&quot;, stroke = 1, size = 12 ) + geom_text( # data = data4plot$text$data, mapping = aes( x = x, y = y, label = label ), hjust = 0, size = 12 ) } myplot } 2.2.3 Stop data inheritance When a geom has its own data supplied, data inheritance stops. nonhighlightedCountries &lt;- data.frame( x=c(48, 52, 53), y=c(48, 53, 54) ) highlightedCountries &lt;- data4plot$text$data plot_allCountries &lt;- { plot_hightlightCountries(highlightedCountries) + geom_point( data = nonhighlightedCountries, aes( x=x, y=y ), size = 12, color= &quot;#a4dce6&quot; ) } plot_allCountries plot_allCountries &lt;- function(highlightedCountries, nonhighlightedCountries) { plot_hightlightCountries(highlightedCountries) + geom_point( data = nonhighlightedCountries, aes( x=x, y=y ), size = 12, color= &quot;#a4dce6&quot; ) } 2.2.4 Finish panel plot_obsessionWithBorders &lt;- { plot_allCountries( hightlightedCountries = highlightedCountries, unhighlightedCountries = unhighlightedCountries )+ geom_abline( aes( slope=1, intercept=0 ), color = &quot;#549ab6&quot;, linetype = 2, size=2 ) } plot_obsessionWithBorders plot_obsessionWithBorders + geom_abline( aes( slope=1, intercept=0 ), color = &quot;#549ab6&quot;, linetype = 2, size=2 ) hightlightXYequal &lt;- function(plot_obsessionWithBorders) { plot_obsessionWithBorders + geom_abline( aes( slope=1, intercept=0 ), color = &quot;#549ab6&quot;, linetype = 2, size=2 ) } "],["layers.html", "第 3 章 Layers 3.1 Time series data 3.2 Aesthetics inheritance 3.3 Sequence of layers 3.4 Create your first geom 3.5 Summary", " 第 3 章 Layers Geometries: geom_line Aesthetics: x, y, color; size source(&quot;support/time-trend.R&quot;) 3.1 Time series data package: lubridate Basic data types do not have time or date type. Time/Date are class that is constructed on top of character data, like &quot;2020-02-01&quot; &quot;2020-02-01 13:58:55&quot; All date/time data sources are normally input as character. It requires parsing for computer to under it is date/time. lubridate::ymd(&quot;2020-02-01&quot;) lubridate::ymd_hms(&quot;2020-02-01 13:58:55&quot;) # UTC time zone by default lubridate::ymd_hms(&quot;2020-02-01 13:58:55&quot;, tz=&quot;Asia/Taipei&quot;) date = lubridate::ymd(c(&quot;2020-02-01&quot;, &quot;2020-04-01&quot;, &quot;2020-06-01&quot;, &quot;2020-09-01&quot;)) data = list() data$Britain &lt;- data.frame( date = date, y = c(0, 50, 80, 100) ) data$Spain &lt;- data.frame( date = date, y = c(0, 32, 53, 103) ) data$Italy &lt;- data.frame( date = date, y = c(0, 50, 60, 99) ) 3.2 Aesthetics inheritance In the past, we have done data inheritance (i.e. data in ggplot()) and both data/aesthetics inheritance (i.e, data and mapping in ggplot()). Actually you can do only aesthetics inheritance as well. sizeInput = 2 #input$sizeInput plot &lt;- list() plot$p1 &lt;- { ggplot( mapping=aes( x=date, y=y ))+ geom_line( data=data$Britain, color=&quot;#096fa1&quot;, size = sizeInput )+ geom_line( data=data$Spain, color=&quot;#ad8c97&quot;, size = sizeInput )+ geom_line( data=data$Italy, color = &quot;#983d4d&quot;, size = sizeInput ) } plot$p1 3.3 Sequence of layers 3.3.1 Line stroke ggplot( mapping=aes( x=date, y=y ))+ geom_line( data=data$Britain, color=&quot;#096fa1&quot;, size = sizeInput ) + geom_line( # the last geom will be on the top data=data$Britain, color=&quot;black&quot;, size = sizeInput ) prop = 0.6 ggplot( mapping=aes( x=date, y=y ))+ geom_line( # the last geom will be on the top data=data$Britain, color=&quot;black&quot;, size = sizeInput ) + geom_line( data=data$Britain, color=&quot;#096fa1&quot;, size = sizeInput*prop ) 3.4 Create your first geom geom_lineWithStroke_error &lt;- function(data, sizeInput, prop) { geom_line( # the last geom will be on the top data=data, color=&quot;black&quot;, size = sizeInput ) + geom_line( data=data, color=&quot;#096fa1&quot;, size = sizeInput*prop ) } class(plot$p1) # ggplot class a list of 9 that complete the definitions of a plot gm &lt;- geom_line( # the last geom will be on the top data=data$Britain, color=&quot;black&quot;, size = sizeInput ) class(gm) # Layer class an environment that defines only a layer of a specific geometric structure and its aesthetics. part of a ggplot class object. + operator must have the preceding object a ggplot object. geom_lineWithStroke_error( data=data$Britain, sizeInput=2, prop=.6 ) The error comes from the function body. It uses + on two layer class objects. There is no ggplot object presented. ggplot()+... will always return a ggplot object. So all of below are ggplot objects: ggplot(), ggplot()+geom_point(...), ggplot()+geom_point(...)+geom_line(...) 3.4.1 Layer adding + Layer adding operator and add a list of layers all at once. Other than the conventional adding: ggplot( mapping=aes( x=date, y=y ))+ geom_line( data=data$Britain, color=&quot;black&quot;, size = sizeInput ) + geom_line( # the last geom will be on the top data=data$Britain, color=&quot;#096fa1&quot;, size = sizeInput*prop ) We can: ggplot( mapping=aes( x=date, y=y )) + list( geom_line( data=data$Britain, color=&quot;black&quot;, size = sizeInput ), geom_line( # the last geom will be on the top data=data$Britain, color=&quot;#096fa1&quot;, size = sizeInput*prop ) ) 3.4.2 New geom function geom_lineWithStroke_prototype &lt;- function(data, sizeInput, prop) { list( geom_line( data=data, color=&quot;black&quot;, size = sizeInput ), geom_line( # the last geom will be on the top data=data, color=&quot;#096fa1&quot;, size = sizeInput*prop ) ) } { ggplot( mapping=aes( x=date, y=y ))+ geom_lineWithStroke_prototype( data=data$Britain, sizeInput, prop )+ geom_lineWithStroke_prototype( data=data$Spain, sizeInput, prop )+ geom_lineWithStroke_prototype( data=data$Italy, sizeInput, prop ) } 3.4.3 dot-dot-dot https://adv-r.hadley.nz/functions.html?q=dot-#fun-dot-dot-dot geom_lineWithStroke_prototype2 &lt;- function(data, sizeInput, prop, color, stroke, size) { list( geom_line( data=data, color=stroke, size = sizeInput ), geom_line( # the last geom will be on the top data=data, color=color, size = sizeInput*prop ) ) } { ggplot( mapping=aes( x=date, y=y ))+ geom_lineWithStroke_prototype2( data=data$Britain, sizeInput=sizeInput, prop=prop, color=&quot;#096fa1&quot;, stroke=&quot;white&quot; )+ geom_lineWithStroke_prototype2( data=data$Spain, sizeInput=sizeInput, prop=prop, color=&quot;#ad8c97&quot;, stroke=&quot;white&quot; )+ geom_lineWithStroke_prototype2( data=data$Italy, sizeInput=sizeInput, prop=prop, color=&quot;#983d4d&quot;, stroke=&quot;white&quot; ) } geom_lineWithStroke is an extension to an existing geom_line function. It would be better to make the input argument inline with geom_line so as to keep other geom_line options, such as linetype. help(geom_line) geom_lineWithStroke &lt;- function( mapping = NULL, data = NULL, stat = &quot;identity&quot;, position = &quot;identity&quot;, na.rm = FALSE, orientation = NA, show.legend = NA, inherit.aes = TRUE, # set up default makes your function easy to use stroke = &quot;white&quot;, prop = 0.9, size = 2, ...){ list( geom_line( data=data, color=stroke, size = size ), geom_line( # the last geom will be on the top mapping = mapping, data = data, stat = stat, position = position, na.rm = na.rm, orientation = orientation, show.legend = show.legend, inherit.aes = inherit.aes, size = size*prop, ...) ) } ... is a special argument for function. It means \"whatever input whose input name is not specified in function arguments. it can be passed directly into other functions who use .... it can be accessed via list(). mySum &lt;- function(...){ browser() argList &lt;- c(...) sum(argList) } mySum(2,3) greeting &lt;- function(name, ...){ browser() argList &lt;- list(...) extraGreeting &lt;- &quot;&quot; if(length(argList)!=0){ extraGreeting &lt;- paste(&quot; Your&quot;, names(argList), &quot; is &quot;, argList) } cat(&quot;Hi &quot;, name, &quot;. &quot;, extraGreeting) return(xx) } greeting(&quot;John&quot;, age=33) { ggplot( mapping=aes( x=date, y=y ))+ geom_lineWithStroke( data=data$Britain, color=&quot;#096fa1&quot; )+ geom_lineWithStroke( data=data$Spain, color=&quot;#ad8c97&quot; )+ geom_lineWithStroke( data=data$Italy, color=&quot;#983d4d&quot; ) } { ggplot( mapping=aes( x=date, y=y ))+ geom_lineWithStroke( data=data$Britain, color=&quot;#096fa1&quot;, linetype=2 )+ geom_lineWithStroke( data=data$Spain, color=&quot;#ad8c97&quot;, linetype=3 )+ geom_lineWithStroke( data=data$Italy, color=&quot;#983d4d&quot;, stroke=&quot;black&quot;, size=5 ) } 3.5 Summary Layers (of geoms) can be added on top of each other through + operator by either: ggplot object + geom1 + geom2; or ggplote object + list(geom1, geom2) When create a new geom function that consists of multiple geoms, use list(geom1, geom2) as function return. When writing a function input argument names: if in definition specifically WITHOUT default: it means something necessary. Users can not ignore. if in definition specifically WITH default: it means something necessary, but there is a good choice of default that users will be happy with it most of the time. ...: a flexible argument especially when our function body has a call to some other function that has ... "]]
