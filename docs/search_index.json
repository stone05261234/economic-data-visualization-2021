[["index.html", "Economic Data Visualization 第 1 章 Prerequisites 1.1 Start a project 1.2 中文 1.3 econDV2 1.4 .Rprofile 1.5 其他", " Economic Data Visualization Dr. Lin, Mau-Ting 2021 第 1 章 Prerequisites 1.1 Start a project Start a new project for your ggplot environment: Project &gt; New Project… &gt; New Directory &gt; New Project 1.2 中文 install.packages( c(&quot;showtext&quot;,&quot;extrafont&quot;) ) sysfonts::font_families() sysfonts::font_add_google(&#39;Noto Sans TC&#39;) sysfonts::font_families() library(ggplot2) library(showtext) showtext_auto() theme_set( theme( text=element_text(family = &quot;Noto Sans TC&quot;) ) ) 你也可以在你的.Rprofile裡加上: library(ggplot2) library(showtext) sysfonts::font_add_google(&#39;Noto Sans TC&#39;) showtext_auto() theme_set( theme( text=element_text(family = &quot;Noto Sans TC&quot;) ) ) 1.3 econDV2 devtools::install_github(&quot;tpemartin/econDV2&quot;) 1.4 .Rprofile library(ggplot2) library(showtext) sysfonts::font_add_google(&#39;Noto Sans TC&#39;) showtext_auto() theme_set( theme( text=element_text(family = &quot;Noto Sans TC&quot;) )+ theme_classic() ) library(econDV2) gg &lt;- list( dash = econDV2::ggdash, geom = econDV2::ggbrowse, aes = econDV2::ggaes ) 1.5 其他 後製軟體： Choose your own image editor, but make sure it support SVG editing. Here I use Boxy SVG. 程式排版： install.packages(&quot;styler&quot;) "],["geometries-and-aesthetics.html", "第 2 章 Geometries and Aesthetics 2.1 An Example", " 第 2 章 Geometries and Aesthetics Available geometries Two steps: Step 1: What geometries do you see? Step 2: With a given geometry, what aesthetics do you observe? Geometries? Aesthetics? 2.1 An Example Geom: geom_point: x, y：varies with observations color (線框顏色): constant stroke (線框粗細): constant fill (內部塗色): constant size (點的大小): constant geom_text: x, y: varies with observations label: varies with observations hjust (文字水平錨點）：between 0 and 1 vjust (文字垂直錨點）: between 0 and 1 # take Colombia, Normway, and Gemany as an example data4plot &lt;- list() data4plot$point$data &lt;- { data.frame( x=c(52.5, 56, 58.5), y=c(48.6, 54.9, 58) ) } data4plot$text$data &lt;- { data.frame( x=c(52.5, 56, 58.5), y=c(48.6, 54.9, 58), label=c(&quot;Colombia&quot;, &quot;Norway&quot;, &quot;Germany&quot;) ) } myplot &lt;- { ggplot()+ geom_point( data=data4plot$point$data, mapping=aes( x=x, y=y ), fill=&quot;blue&quot;, shape=21, color=&quot;black&quot;, stroke=1, size=1 )+ geom_text( data=data4plot$text$data, mapping=aes( x=x, y=y, label=label ), hjust = 1, size = 1 ) } myplot use econDV2::ggdash() to quickly create a shiny app of your ggplot to fine tune your graph. 2.1.1 econDV2::ggdash myplot &lt;- { ggplot()+ geom_point( data=data4plot$point$data, mapping=aes( x=x, y=y ), fill=&quot;blue&quot;, #input$fill_point shape=21, # default point is a circle without border, you need another type of point color=&quot;black&quot;, #input$color_point stroke=1, #input$stroke_point size=1 #input$size_point )+ geom_text( data=data4plot$text$data, mapping=aes( x=x, y=y, label=label ), hjust = 1, #input$hjust_text size = 1 #input$size_text ) } myplot myplot &lt;- { ggplot() + geom_point( data = data4plot$point$data, mapping = aes( x = x, y = y ), fill = &quot;#2fc1d3&quot;, shape = 21, color = &quot;black&quot;, stroke = 1, size = 12 ) + geom_text( data = data4plot$text$data, mapping = aes( x = x, y = y, label = label ), hjust = 0, size = 12 ) } myplot 2.1.2 Script saving If you are happy with your graph, you may want to make it reproducible and easy to use. Think of how you want to use it next time. Turn your script into a function, and save in a R script. Select the code lines that you want to turn into a function Code &gt; Extract Function The result after proper revision: myGoodPlot &lt;- function(data4plot) { myplot &lt;- { ggplot() + geom_point( data = data4plot$point$data, mapping = aes( x = x, y = y ), fill = &quot;#2fc1d3&quot;, shape = 21, color = &quot;black&quot;, stroke = 1, size = 12 ) + geom_text( data = data4plot$text$data, mapping = aes( x = x, y = y, label = label ), hjust = 0, size = 12 ) } myplot } To reuse: source(&quot;support/ggplots.R&quot;) # suppose this is where your script file is data4plot &lt;- list() data4plot$point$data &lt;- { data.frame( x=c(52.5, 56, 58.5), y=c(48.6, 54.9, 58) ) } data4plot$text$data &lt;- { data.frame( x=c(52.5, 56, 58.5), y=c(48.6, 54.9, 58), label=c(&quot;Colombia&quot;, &quot;Norway&quot;, &quot;Germany&quot;) ) } myGoodPlot(data4plot) If you replace data4plot with the real data, you get the accurate graph that you want. 2.1.3 Graph output Saving is tricky. You need to find the viewport ratio. (Different computers are different) Given your graph width and height, you can save your output as: dir.create(&quot;works&quot;) ggsave( filename = &quot;works/week1.png&quot;, plot=myGoodPlot(data4plot), width=930, height=400, units=&quot;mm&quot; # text size is default in mm unit ) 2.1.4 ggdash more ggdash can control any input within a programming block myplot2 &lt;- { myshape = 21 #input$shape_point ggplot() + geom_point( data = data4plot$point$data, mapping = aes( x = x, y = y ), fill = &quot;#2fc1d3&quot;, shape = myshape, color = &quot;black&quot;, stroke = 1, size = 12 ) + geom_text( data = data4plot$text$data, mapping = aes( x = x + 0, #input$x_text y = y, label = label ), hjust = 0, size = 12 ) } myplot2 "]]
